/**
 * Remove me.
 */
import * as Bromise from 'bluebird';
import { PkgJson, Dict } from './workspace';
import { CmdProcess } from './cmd-process';
export interface GraphOptions {
    bin: string;
    fastExit: boolean;
    collectLogs: boolean;
    addPrefix: boolean;
    mode: 'parallel' | 'serial' | 'stages';
    recursive: boolean;
    doneCriteria: string | undefined;
    workspacePath: string;
    exclude: string[];
    excludeMissing: boolean;
    showReport: boolean;
}
export declare class RunGraph {
    pkgJsons: PkgJson[];
    opts: GraphOptions;
    pkgPaths: Dict<string>;
    private procmap;
    children: CmdProcess[];
    finishedAll: Bromise<CmdProcess[]>;
    private jsonMap;
    private runList;
    private resultMap;
    private throat;
    prefixer: (basePath: string, pkg: string, line: string) => string;
    constructor(pkgJsons: PkgJson[], opts: GraphOptions, pkgPaths: Dict<string>);
    private closeAll;
    private lookupOrRun;
    private allDeps;
    detectCycles(): string[];
    private makeCmd;
    private runOne;
    private checkResultsAndReport;
    run(cmd: string, pkgs?: string[]): Bromise<boolean>;
}
